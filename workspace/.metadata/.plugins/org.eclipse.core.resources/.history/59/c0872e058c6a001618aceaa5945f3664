package exercise03;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Exercise03 {
	public static void main(String[] args)
	{
		File sourceDirectory= new File("C:/Users/vjnanendra/Desktop/directory1");	
		File destinationDirectory=new File("C:/Users/vjnanendra/Desktop/directory2");
		 ExecutorService pool = Executors.newFixedThreadPool(10);

	        for(int i = 1; i <= 10; i++){
	            Runnable r = new Runnable(){
	                public void run() {
	                   copyFolder(sourceDirectory,destinationDirectory); 
	                }
	                private void copyFolder(File src,File dest)
	                {
	                	if(src.isDirectory()){
	                		if(!dest.exists()){
	                			dest.mkdir();
	                		}

	                		String files[] = src.list();

	                		for (String file : files) {
	                			File srcFile = new File(src, file);
	                			File destFile = new File(dest, file);
	                			copyFolder(srcFile,destFile);
	                		}
	                	}
	                	else
	                	{
	                		copyFile(src,dest);
	                	}
	                }
	                private void copyFile(File src, File dest)
	                {
	                	byte[] buffer = new byte[1024];
	                	int length;
	                	try{
	                	InputStream in = new FileInputStream(src);
	        	        OutputStream out = new FileOutputStream(dest);
	        	        while ((length = in.read(buffer)) > 0){
	        	    	   out.write(buffer, 0, length);
	        	        }
	        	        in.close();
	        	        out.close();
	        	        }
	        	        catch(Exception e)
	        	        {
	        	        	System.out.println(e);
	        	        }
	        	        
	                }
	            };
	            pool.execute(r);
	        }
	}

}
